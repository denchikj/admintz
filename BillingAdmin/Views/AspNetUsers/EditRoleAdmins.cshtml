@model BillingAdmin.Models.UsersView.UsersEditViewModel

@{
    ViewBag.Title = "EditRoleAdmin";
    var db = new BillingAdmin.Models.Entities();
    var UserClaims = db.AspNetUserClaims.Where(user => user.UserId == Model.Id);
}

<h2>EditRoleAdmin</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="row">
            <div class="col-md-3">
                <h3 class="no-margin no-padding">Редактирование</h3>
            </div>

            <div class="col-md-9 text-right">
                @Html.ActionLink("Просмотр", "DetailsRoleAdmins", new { id = Model.Id }, new { @class = "btn btn-default" })
                @Html.ActionLink("Сменить пароль", "ResetPassword", new { id = Model.Id }, new { @class = "btn btn-default" })
                @Html.ActionLink("В список пользователей", "IndexRoleAdmins", new { }, new { @class = "btn btn-success" })
            </div>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RoleId, "Роль пользователя", htmlAttributes: new { @class = "col-md-2 control-label" })
            <div class="col-md-6">
                <input id="userRoles" name="userRoles" type="hidden" value="null" />
                <br />
                @foreach (var UserRoles in ViewBag.UserRoles as List<BillingAdmin.Models.AspNetRoles>)
                {
                    try
                    {
                        if ((ViewBag.CurrentUserRoles as List<string>).Contains(UserRoles.Id))
                        {
                            <input id="UserRoles-@UserRoles.Id" class="UserRole" type="checkbox" value="@UserRoles.Name" checked />
                        }
                        else
                        {
                            <input id="UserRoles-@UserRoles.Id" class="UserRole" type="checkbox" value="@UserRoles.Name" />
                        }
                    }
                    catch
                    {
                        <input id="UserRoles-@UserRoles.Id" class="UserRole" type="checkbox" value="@UserRoles.Name" />
                    }
                    <label for="UserRoles-@UserRoles.Id">
                        <span></span>
                        @UserRoles.Name
                    </label>
                    <br />
                }
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/ScriptsValidate")

    <script>
        $(document).on('change', '.UserRole', function () {
            var checkboxes = document.getElementsByClassName('UserRole');
            var checkboxesChecked = []; // можно в массиве их хранить, если нужно использовать
            for (var index = 0; index < checkboxes.length; index++) {
                if (checkboxes[index].checked) {
                    checkboxesChecked.push(checkboxes[index].value); // положим в массив выбранный
                }
            }
            $('#userRoles').val(JSON.stringify(checkboxesChecked));
        });
    </script>
}
