@model IEnumerable<BillingAdmin.Models.UsersView.UsersIndexViewModel>
@using BillingAdmin.Models
@{
    ViewBag.Title = "Список ролей";
    Entities db = new Entities();
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="white-block" style="width: 100%">
    <div class="row">
        <div class="col-md-8">
            <h3 class="no-margin no-padding">Список ролей</h3>
        </div>
        <div class="col-md-4 text-right">
            <a class="btn btn-orange-tta" href="@Url.Action("CreateRole","AspNetUsers")">Добавить</a>
            <a class="btn btn-orange-tta" href="@Url.Action("EditRole","AspNetUsers")">Редактировать</a>
            <a class="btn btn-grey-tta" href="@Url.Action("IndexRole","AspNetUsers")">Вернуться к списку</a>
        </div>
    </div>
</div>
<div class="line"></div>
<div class="white-block">
    <div class="table-responsive" >
        @Html.ActionLink("Добавить пользователя", "CreateForAccount", "AspNetUsers", new { @class = "btn btn-orange-tta btn-margin-tta" })
        @Html.ActionLink("Привязать пользователя", "AttachToAccount", "AspNetUsers", new { @class = "btn btn-orange-tta btn-margin-tta" })
        <table id="ResultTable" class="table table-striped" style="width: 100%;">
            <thead class="col-md-auto">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Id)</th>
                    <th>@Html.DisplayNameFor(model => model.UserName)</th>
                    <th>@Html.DisplayNameFor(model => model.Email)</th>
                    <th>Роли</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="~/Scripts/Accounts/TableLoad.js"></script>*@
    <script src="https://cdn.datatables.net/select/1.3.1/js/dataTables.select.min.js"></script>
    <link href="https://cdn.datatables.net/select/1.3.1/css/select.dataTables.min.css" rel="stylesheet" />
    <script>
        var idsAccounts;

        $(document).ready(function () {
            $('#ResultTable').DataTable(
                {
                    "columnDefs": [
                        {
                            render: function (data, type, full, meta) {
                                return "<div class='text-wrap width-200'>" + data + "</div>";
                            },
                            targets: 1
                        },
                        {
                            'orderable': false,
                            className: 'select-checkbox',
                            targets: 0,
                            'checkboxes': {
                                'selectRow': true
                            }
                        }
                        ,
                        {
                            render: function (data, type, full, meta) {
                                return "<div class='text-wrap width-200'>" + data + "</div>";
                            },
                            targets: 2
                        }
                    ],
                    select: {
                        style: 'multi',
                        //selector: 'td:first-child'
                    },
                    "fixedHeader": true,
                    "order": [[0, "desc"]],
                    "language": {
                        "decimal": "",
                        "emptyTable": "Нет данных",
                        "info": "Показано c _START_ по _END_ из _TOTAL_",
                        "infoEmpty": "Показано c 0 по 0 из 0",
                        "infoFiltered": "(отфильтровано из _MAX_ записей)",
                        "infoPostFix": "",
                        "thousands": ",",
                        "lengthMenu": "_MENU_",
                        "loadingRecords": "Загрузка...",
                        "processing": "В процессе...",
                        "search": "",
                        "searchPlaceholder": "Поиск в таблице",
                        "zeroRecords": "Совпадений не найдено",
                        "paginate": {
                            "first": "Первая",
                            "last": "Последняя",
                            "next": "Следующая",
                            "previous": "Предыдущая"
                        },
                        "aria": {
                            "sortAscending": ": сортировка по возрастанию",
                            "sortDescending": ": сортировка по убыванию"
                        }
                    },
                    "columns": [
                        { "data": "Id" },
                        { "data": "Email" },
                        { "data": "UserName" },
                        { "data": "UserRoles" },
                    ],
                    ajax: {
                        type: "POST",
                        dataType: "json",
                        url: '@Url.Action("GetIndexRole", "AspNetUsers")'
                    },
                    // dom: 'Bfrtip',
                    dom: '<"row panel no-back" <"col-xs-12 col-lg-3 col-md-4" l><"col-xs-12 col-lg-6 col-md-4" <"#InsertButtons">><"col-xs-12 col-lg-3 col-md-4" f>>t' +
                        '<"row"<"col-xs-12 col-md-3"i><"col-xs-12 col-md-9"p>>',
                    pageLength: 25,
                    lengthMenu: [[25, 50, 100, -1], ["Показывать по 25", "Показывать по 50", "Показывать по 100", "Показывать все"]]
                }
            );

            var table = $('#ResultTable').DataTable();
            table.buttons().container().appendTo($('#InsertButtons'));
            $('.dataTables_filter input[type = "search"]').addClass('cv no-border');
            $('.dataTables_length select').addClass('selectpicker no-back');
            $('.dataTables_length select').selectpicker('refresh');

            table.on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    var data = table.rows(indexes).data().pluck('id');

                    // do something with the ID of the selected items
                    console.log("row selected row index: " + indexes);
                    //console.log(table.rows(indexes).data().pluck(1));

                    var count = table.rows({ selected: true }).count();
                    console.log('<div>' + count + ' row(s) selected</div>');
                    console.log(table.rows({ selected: true }).data().pluck(1));

                    idsAccounts = table.rows({ selected: true }).data().pluck(1);
                }
            });

            table.on('deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    var data = table.rows(indexes).data().pluck('id');

                    // do something with the ID of the deselected items
                    console.log("row deselected row index: " + indexes);
                    // console.log(table.rows(indexes).data().pluck(1));

                    var count = table.rows({ selected: true }).count();
                    console.log('<div>' + count + ' row(s) selected</div>');
                    console.log(table.rows({ selected: true }).data().pluck(1));

                    idsAccounts = table.rows({ selected: true }).data().pluck(1);

                }
            });
        });
    </script>
}

<style>
    .dataTables_filter {
        width: 70% !important;
    }

    .dataTables_length {
        width: 30% !important;
    }

    .dataTables_filter input {
        width: 62% !important;
    }
</style>